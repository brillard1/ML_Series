# -*- coding: utf-8 -*-
"""B20CS002_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cfA5gSZKa0-c19C5Kgp1K1aoSGatVs1b

##Question1_Penguin
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split as tts

df = pd.read_csv('penguins.csv')
df = df.dropna()

Y = df['species']
X = df.drop(['species'], axis='columns')

dummies = pd.concat([pd.get_dummies(df.island), pd.get_dummies(df.sex), pd.get_dummies(df.year)], axis='columns')
merge = pd.concat([X,dummies], axis='columns')
X = merge.drop(['island','sex','year',2007], axis='columns')
X['species'] = Y
x_train, x_test, _, _ = tts(X,Y,test_size=0.2,shuffle = True)

x_train

"""###Purity Value, Classification"""

def check_purity(data):
    
    lbl = data[:, -1]
    unique_classes = np.unique(lbl)

    if len(unique_classes) == 1:
        return True
    else:
        return False

# classify continuous datas
def classify_data(data):
    
    label_column = data[:, -1]
    unique_classes, counts_unique_classes = np.unique(label_column, return_counts=True)

    index = counts_unique_classes.argmax()
    classification = unique_classes[index]

    return classification

classify_data(x_train[x_train.bill_length_mm > 50].values)

"""###Potential Splits"""

def get_potential_splits(data):
    
    potential_splits = {}
    n_columns = data.shape[1]
    for column_index in range(n_columns - 1):          # excluding the last column which is the species
        values = data[:, column_index]
        unique_values = np.unique(values)
        
        potential_splits[column_index] = unique_values
    
    return potential_splits


potential_splits = get_potential_splits(x_train.values)
potential_splits

"""###Graphical Analysis of all the possible best splits in the data"""

import seaborn as sns
import matplotlib.pyplot as plt
sns.lmplot(data=x_train, x="bill_length_mm", y="body_mass_g", hue = "species", fit_reg=False)
# plt.hlines(y=potential_splits[5], xmin=30, xmax=60)
plt.vlines(x=potential_splits[0], ymin=1500, ymax=7000)

sns.lmplot(data=x_train, x="bill_length_mm", y="body_mass_g", hue = "species", fit_reg=False)
plt.hlines(y=potential_splits[3], xmin=30, xmax=60)
# plt.vlines(x=potential_splits[2], ymin=1500, ymax=7000)

sns.lmplot(data=x_train, x="bill_length_mm", y="bill_depth_mm", hue = "species", fit_reg=False)
plt.hlines(y=potential_splits[1], xmin=0, xmax=60)

sns.lmplot(data=x_train, x="flipper_length_mm", y="bill_depth_mm", hue = "species", fit_reg=False)
plt.vlines(x=potential_splits[2], ymin=12, ymax=22)

"""###Split Data"""

def split_data(data, split_column, split_value):
    
    split_column_values = data[:, split_column]

    type_of_feature = FEATURE_TYPES[split_column]
    if type_of_feature == "continuous":
        data_below = data[split_column_values <= split_value]
        data_above = data[split_column_values >  split_value]
    
    # feature is categorical   
    else:
        data_below = data[split_column_values == split_value]
        data_above = data[split_column_values != split_value]
    
    return data_below, data_above

"""###Entropy and Information Gain"""

def calculate_entropy(data):
    
    label_column = data[:, -1]
    _, counts = np.unique(label_column, return_counts=True)

    probabilities = counts / counts.sum()
    entropy = sum(probabilities * -np.log2(probabilities))
     
    return entropy

def calculate_overall_entropy(data_below, data_above):
    
    n = len(data_below) + len(data_above)
    p_data_below = len(data_below) / n
    p_data_above = len(data_above) / n

    overall_entropy =  (p_data_below * calculate_entropy(data_below) + p_data_above * calculate_entropy(data_above))

    return overall_entropy

def determine_best_split(data, potential_splits):
    
    overall_entropy = -99999
    Total_Entropy = calculate_entropy(data)
    for column_index in potential_splits:
        for value in potential_splits[column_index]:
            data_below, data_above = split_data(data, split_column=column_index, split_value=value)
            current_overall_entropy = calculate_overall_entropy(data_below, data_above)

            information_gain = Total_Entropy - current_overall_entropy
            if information_gain > overall_entropy:
                overall_entropy = information_gain
                best_split_column = column_index
                best_split_value = value
    
    return best_split_column, best_split_value

determine_best_split(x_train.values,potential_splits)

"""###Type of features"""

def determine_type_of_feature(df):
    
    feature_types = []
    n_unique_values_treshold = 14
    for feature in df.columns:
        if feature != "species":
            unique_values = df[feature].unique()
            example_value = unique_values[0]

            if (isinstance(example_value, str)) or (len(unique_values) <= n_unique_values_treshold):
                feature_types.append("categorical")
            else:
                feature_types.append("continuous")
    
    return feature_types

"""###Decision Tree"""

def decision_tree_algorithm(df, counter=0, min_samples=2, max_depth=5):
    
    # data preparations
    if counter == 0:
        global COLUMN_HEADERS, FEATURE_TYPES
        COLUMN_HEADERS = df.columns
        FEATURE_TYPES = determine_type_of_feature(df)
        data = df.values
    else:
        data = df           
    
    
    # base cases
    if (check_purity(data)) or (len(data) < min_samples) or (counter == max_depth):
        classification = classify_data(data)
        
        return classification

    
    # recursive part
    else:    
        counter += 1

        # helper functions 
        potential_splits = get_potential_splits(data)
        split_column, split_value = determine_best_split(data, potential_splits)
        data_below, data_above = split_data(data, split_column, split_value)
        
        # check for empty data
        if len(data_below) == 0 or len(data_above) == 0:
            classification = classify_data(data)
            return classification
        
        # determine question
        feature_name = COLUMN_HEADERS[split_column]
        type_of_feature = FEATURE_TYPES[split_column]
        if type_of_feature == "continuous":
            question = "{} <= {}".format(feature_name, split_value)
            
        # feature is categorical
        else:
            question = "{} = {}".format(feature_name, split_value)
        
        # instantiate sub-tree
        sub_tree = {question: []}
        
        # find answers
        yes_answer = decision_tree_algorithm(data_below, counter, min_samples, max_depth)
        no_answer = decision_tree_algorithm(data_above, counter, min_samples, max_depth)
        
        # If the answers are the same, then there is no point in asking the qestion.
        # This could happen when the data is classified even though it is not pure
        # yet (min_samples or max_depth base case).
        if yes_answer == no_answer:
            sub_tree = yes_answer
        else:
            sub_tree[question].append(yes_answer)
            sub_tree[question].append(no_answer)
        
        return sub_tree

from pprint import pprint
tree = decision_tree_algorithm(x_train, max_depth=15)
pprint(tree)

"""###Prediction of the Species"""

def predict(example, tree):
    question = list(tree.keys())[0]
    feature_name, comparison_operator, value = question.split(" ")

    # ask question
    if comparison_operator == "<=":  # feature is continuous
        if example[feature_name] <= float(value):
            answer = tree[question][0]
        else:
            answer = tree[question][1]
    
    # feature is categorical
    else:
        if str(example[feature_name]) == value:
            answer = tree[question][0]
        else:
            answer = tree[question][1]

    # base case
    if not isinstance(answer, dict):
        return answer
    
    # recursive part
    else:
        residual_tree = answer
        return predict(example, residual_tree)

eg = x_test.iloc[9]
predict(eg, tree)

"""Overall and Classwise Accuracy"""

def calculate_accuracy(df, tree):

    df["classification"] = df.apply(predict, axis=1, args=(tree,))
    df["classification_correct"] = df["classification"] == df["species"]
    
    overall_accuracy = df["classification_correct"].mean()
    data = df.values
    unique_classes, unique_counts = np.unique(data[:,-3], return_counts = True)

    #lists of predicted and orignal data
    class_orig = data[:,-3]
    class_pred = data[:,-2]

    class_wise_accuracy_data = []

    for class_type in unique_classes:
      tp = 0
      fp = 0
      for i in range(len(class_orig)):
        if (class_type == class_orig[i] or class_type == class_pred[i]):
          if (class_orig[i] == class_pred[i]):
            tp+=1
          else:
            fp+=1
      class_wise_accuracy_data.append(tp/(tp+fp))
    classwise_accuracy = sum(class_wise_accuracy_data)/len(class_wise_accuracy_data)

    return overall_accuracy, classwise_accuracy

overall_accuracy, classwise_accuracy = calculate_accuracy(x_test, tree)
print(overall_accuracy*100, classwise_accuracy*100)